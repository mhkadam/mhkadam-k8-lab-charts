# helm install -f ./configuration-cluster-agent.yaml "hvmk" appdynamics-charts/cluster-agent --namespace=appdynamics
# helm upgrade -f ./configuration-cluster-agent.yaml "hvmk-eks" appdynamics-charts/cluster-agent --namespace=appdynamics

deploymentMode: PRIMARY

installClusterAgent: true
installInfraViz: true

imageInfo:
  agentImage: docker.io/appdynamics/cluster-agent
  agentTag: 22.12.1
  operatorImage: docker.io/appdynamics/cluster-agent-operator
  operatorTag: 22.12.1
  machineAgentImage: docker.io/appdynamics/machine-agent-analytics
  machineAgentTag: 22.12.0
  netVizImage: docker.io/appdynamics/machine-agent-netviz
  netvizTag: 21.3.0  
  #operatorTag: 0.6.6
  imagePullPolicy: Always
  #imagePullSecrets: aws-ecr

controllerInfo:
  url: https://ps-east-prod.saas.appdynamics.com:443
  account: ps-east-prod
  username: api-user
  password: api-user
  accessKey: i7x6qm2k1rpg
  globalAccount: ps-east-prod_3f0aff03-8206-480f-9b82-872c2d46f986

#RBAC Config
createServiceAccount: true
agentServiceAccount: appdynamics-cluster-agent
operatorServiceAccount: appdynamics-operator
infravizServiceAccount: appdynamics-infraviz


# Cluster agent config
clusterAgent:
  nsToMonitorRegex: .*
  clusterMetricsSyncInterval: 60
  metadataSyncInterval: 60
  eventUploadInterval: 10
  httpClientTimeout: 30
  podBatchSize: 6
  imagePullSecret: ""
  containerProperties:
    containerBatchSize: 5
    containerParallelRequestLimit: 1
    containerRegistrationInterval: 120
  logProperties:
    logFileSizeMb: 5
    logFileBackups: 3
    logLevel: DEBUG
  metricProperties:
    metricsSyncInterval: 30
    metricUploadRetryCount: 2
    metricUploadRetryIntervalMilliSeconds: 5
# InfraViz config
infraViz:
  nodeOS: "linux"
  enableMasters: false
  stdoutLogging: false
  enableContainerHostId: true
  enableServerViz: false
  enableDockerViz: false

# Netviz config
netViz:
  enabled: false
  netVizPort: 3892


# Agent pod specific properties
agentPod:
  nodeSelector: {}
  tolerations: []
  resources:
    limits:
      cpu: "1250m"
      memory: "300Mi"
    requests:
      cpu: "750m"
      memory: "150Mi"
  labels: {}

# Operator pod specific properties
operatorPod:
  nodeSelector: {}
  tolerations: []
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

# Infraviz pod specific properties
infravizPod:
  nodeSelector:
    kubernetes.io/os: linux
  tolerations: []
  resources:
    limits:
      cpu: 500m
      memory: "1G"
    requests:
      cpu: 200m
      memory: "800M"


  # overrideVolumeMounts property is valid only after 0.6.10 operator version
  overrideVolumeMounts:

# Subcharts boolean install switches
install:
  metrics-server: false

stdoutLogging: "true"
#=====

instrumentationConfig:
  enabled: true
  instrumentationMethod: Env
  nsToInstrumentRegex: java-apps
  appNameStrategy: manual
  defaultAppName: JavaAuto-Helm
  numberOfTaskWorkers: 2
  imagePullPolicy: Always
  #imagePullSecrets: aws-ecr
  defaultCustomConfig: "-Dappagent.start.timeout=1"
  defaultAnalyticsHost: appd-infraviz.appdynamics.svc.cluster.local
  defaultAnalyticsPort: 9090
  defaultAnalyticsSslEnabled: false
  resourcesToInstrument: [Deployment,StatefulSet]
  imageInfo:
    java:
      image: "docker.io/appdynamics/java-agent:20.11.0"
      agentMountPath: /opt/appdynamics
      imagePullPolicy: Always
  
  instrumentationRules:
    - namespaceRegex: node-app
      matchString: ^open
      language: nodejs
      appName: NodeAuto-helm
      #tierName: TIER_ONE
      imageInfo:
        image: "docker.io/appdynamics/nodejs-agent:20.5.0-alpinev10"
        #image: "docker.io/appdynamics/nodejs-agent:21.1.0-10.0.0-alpine"
        agentMountPath: /opt/appdynamics
        imagePullPolicy: Always
    - namespaceRegex: java-apps
      #matchString: stream

      customAgentConfig: "-Dotel.metrics.exporter=otlp -Dotel.exporter.otlp.traces.endpoint=simplest-collector.opentelemetry-operator-system.svc.cluster.local:4317 Dotel.traces.exporter=otlp -Dappdynamics.opentelemetry.enabled=true -Dotel.resource.attributes=\"service.name=otel-eks,service.namespace=java-hvmk-k8\""
      language: java
      appName: java-hvmk-k8
      imageInfo:
        image: "docker.io/appdynamics/java-agent:22.12.0"
        agentMountPath: /opt/appdynamics
        imagePullPolicy: Always        
#=====

