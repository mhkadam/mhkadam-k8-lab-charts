## helm upgrade --install -f ./user-values-aks-dev.yaml aks-dev-cluster ./ --namespace=appdynamics --version 1.7.0
## AppDynamics Cluster Agent configuration file
## All the comments start with two or more # characters

deploymentMode: PRIMARY

installClusterAgent: true
installInfraViz: false

# Docker images
imageInfo:
  agentImage: artifactory.it.jetblue.com/b6-appd-agents/appdynamics/cluster-agent
  agentTag: 22.11.0
  operatorImage: artifactory.it.jetblue.com/b6-appd-agents/appdynamics/cluster-agent-operator
  operatorTag: 22.11.0
  machineAgentImage: artifactory.it.jetblue.com/b6-appd-agents/appdynamics/machine-agent-analytics
  machineAgentTag: 22.9.0
  imagePullPolicy: Always 
  imagePullSecrets: artifactory.b6nonprod.read.secret

# AppDynamics controller info
controllerInfo:
  url: https://jetblue-test.saas.appdynamics.com:443
  account: jetblue-test         
  username: api.user@jetblue-test
  password: Welcome1
  accessKey: 56a8e4a8-644c-4d5e-bffa-e360e18933ef
  globalAccount: jetblue-test_910bbaf1-f6ed-4175-a38f-3dc6fd3129b7

# Cluster agent config
clusterAgent:
  nsToMonitorRegex: .*
  nsToExcludeRegex: ^kube-system$|^sumologic$|^calico-system$|^appdynamics$|^aadpodidentity$|^twistlock$|^ingress-nginx$
  imagePullSecret: artifactory.b6nonprod.read.secret
  logProperties:
    logLevel: INFO

# Agent pod specific properties
# When you perform auto-instrumentation, you need to increase the memory limits by 50Mi for every 100 pods. 
# For Example, If 500 pods are instrumented through the agent, add 550Mi (300Mi + 250Mi) to the memory limits value.
# Increase the CPU limits by 100m ( 1350m ) when auto-instrumentation is enabled.
agentPod:
#  tolerations:
#  - key: CriticalAddonsOnly
#    operator: Exists
  resources:
    limits:
      cpu: "1350m"
      memory: "1000Mi"
    requests:
      cpu: "750m"
      memory: "500Mi"

# Operator pod specific properties
operatorPod:
#  tolerations:
#  - key: CriticalAddonsOnly
#    operator: Exists
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

# Infraviz pod specific properties
infravizPod:
  tolerations:
  - key: CriticalAddonsOnly
    operator: Exists
  - key: jobtype
    operator: Exists
  resources:
    limits:
      cpu: 500m
      memory: "1G"
    requests:
      cpu: 200m
      memory: "800M"
  imagePullSecret: artifactory.b6nonprod.read.secret
  priorityClassName: system-node-critical

# RBAC config
agentServiceAccount: appdynamics-cluster-agent
operatorServiceAccount: appdynamics-operator
infravizServiceAccount: appdynamics-infraviz

# Instrumentation config
instrumentationConfig:
  enabled: true
#  instrumentationMethod: Env  ( Note:  This needs to be set to actually enable AUTO INSTRUMENTATION )
  instrumentationMethod: Env
#  nsToInstrumentRegex: pnr ( Note:  This needs to be defined to target the namespace of ANY APP you want to instrument, like dev|pnr, etc )
  nsToInstrumentRegex: ^pnr$|^vcr$
  appNameStrategy: label
  # Timeout settings: If within 1 seconds, agent is not completed init steps, it will allow the application to start regardless
  defaultCustomConfig: "-Dappagent.start.timeout=1"
  defaultAppName: AKS-DEV
  numberOfTaskWorkers: 2
  imagePullPolicy: Always
  imagePullSecrets: artifactory.b6nonprod.read.secret
  # Defines base images used by all applications, unless overridden in instrumentationRules
  imageInfo:
    java:
      image: artifactory.it.jetblue.com/b6-appd-agents/appdynamics/java-agent:21.11.3
      imagePullPolicy: Always
      agentMountPath: /opt/appdynamics
  defaultInstrumentMatchString: "^nevermatch$"
  resourcesToInstrument: [Deployment,StatefulSet]
  instrumentationRules:
    - namespaceRegex: ^pnr$
      matchString: pnr-job-blob-processor-deployment
      language: java
      appNameLabel: appdAppName
      labelMatch:
        - framework: java
      imageInfo:
        image: artifactory.it.jetblue.com/b6-appd-agents/appdynamics/java-agent:22.2.0
        imagePullPolicy: Always
        agentMountPath: /opt/appdynamics
      runAsGroup: 1000
      runAsUser: 1000
    - namespaceRegex: ^vcr$
      matchString: vcr-srv-domain-utility-deployment
      language: java
      appNameLabel: appdAppName
      labelMatch:
        - framework: java
      imageInfo:
        image: artifactory.it.jetblue.com/b6-appd-agents/appdynamics/java-agent:22.2.0
        imagePullPolicy: Always
        agentMountPath: /opt/appdynamics
      # customAgentConfig: "-Dappdynamics.agent.reuse.nodeName=false"
      runAsGroup: 1000
      runAsUser: 1000
  #=====
